// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/19/2019 22:52:31"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    meuchip
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module meuchip_vlg_sample_tst(
	IN1,
	IN2,
	IN3,
	IN4,
	sampler_tx
);
input  IN1;
input  IN2;
input  IN3;
input  IN4;
output sampler_tx;

reg sample;
time current_time;
always @(IN1 or IN2 or IN3 or IN4)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module meuchip_vlg_check_tst (
	OUT1,
	OUT2,
	OUT3,
	OUT4,
	sampler_rx
);
input  OUT1;
input  OUT2;
input  OUT3;
input  OUT4;
input sampler_rx;

reg  OUT1_expected;
reg  OUT2_expected;
reg  OUT3_expected;
reg  OUT4_expected;

reg  OUT1_prev;
reg  OUT2_prev;
reg  OUT3_prev;
reg  OUT4_prev;

reg  OUT1_expected_prev;
reg  OUT2_expected_prev;
reg  OUT3_expected_prev;
reg  OUT4_expected_prev;

reg  last_OUT1_exp;
reg  last_OUT2_exp;
reg  last_OUT3_exp;
reg  last_OUT4_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	OUT1_prev = OUT1;
	OUT2_prev = OUT2;
	OUT3_prev = OUT3;
	OUT4_prev = OUT4;
end

// update expected /o prevs

always @(trigger)
begin
	OUT1_expected_prev = OUT1_expected;
	OUT2_expected_prev = OUT2_expected;
	OUT3_expected_prev = OUT3_expected;
	OUT4_expected_prev = OUT4_expected;
end



// expected OUT1
initial
begin
	OUT1_expected = 1'bX;
end 

// expected OUT2
initial
begin
	OUT2_expected = 1'bX;
end 

// expected OUT3
initial
begin
	OUT3_expected = 1'bX;
end 

// expected OUT4
initial
begin
	OUT4_expected = 1'bX;
end 
// generate trigger
always @(OUT1_expected or OUT1 or OUT2_expected or OUT2 or OUT3_expected or OUT3 or OUT4_expected or OUT4)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected OUT1 = %b | expected OUT2 = %b | expected OUT3 = %b | expected OUT4 = %b | ",OUT1_expected_prev,OUT2_expected_prev,OUT3_expected_prev,OUT4_expected_prev);
	$display("| real OUT1 = %b | real OUT2 = %b | real OUT3 = %b | real OUT4 = %b | ",OUT1_prev,OUT2_prev,OUT3_prev,OUT4_prev);
`endif
	if (
		( OUT1_expected_prev !== 1'bx ) && ( OUT1_prev !== OUT1_expected_prev )
		&& ((OUT1_expected_prev !== last_OUT1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT1_expected_prev);
		$display ("     Real value = %b", OUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT1_exp = OUT1_expected_prev;
	end
	if (
		( OUT2_expected_prev !== 1'bx ) && ( OUT2_prev !== OUT2_expected_prev )
		&& ((OUT2_expected_prev !== last_OUT2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT2_expected_prev);
		$display ("     Real value = %b", OUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT2_exp = OUT2_expected_prev;
	end
	if (
		( OUT3_expected_prev !== 1'bx ) && ( OUT3_prev !== OUT3_expected_prev )
		&& ((OUT3_expected_prev !== last_OUT3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT3_expected_prev);
		$display ("     Real value = %b", OUT3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT3_exp = OUT3_expected_prev;
	end
	if (
		( OUT4_expected_prev !== 1'bx ) && ( OUT4_prev !== OUT4_expected_prev )
		&& ((OUT4_expected_prev !== last_OUT4_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT4_expected_prev);
		$display ("     Real value = %b", OUT4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT4_exp = OUT4_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module meuchip_vlg_vec_tst();
// constants                                           
// general purpose registers
reg IN1;
reg IN2;
reg IN3;
reg IN4;
// wires                                               
wire OUT1;
wire OUT2;
wire OUT3;
wire OUT4;

wire sampler;                             

// assign statements (if any)                          
meuchip i1 (
// port map - connection between master ports and signals/registers   
	.IN1(IN1),
	.IN2(IN2),
	.IN3(IN3),
	.IN4(IN4),
	.OUT1(OUT1),
	.OUT2(OUT2),
	.OUT3(OUT3),
	.OUT4(OUT4)
);

// IN1
always
begin
	IN1 = 1'b0;
	IN1 = #50000 1'b1;
	#50000;
end 

// IN2
always
begin
	IN2 = 1'b0;
	IN2 = #100000 1'b1;
	#100000;
end 

// IN3
initial
begin
	repeat(3)
	begin
		IN3 = 1'b0;
		IN3 = #150000 1'b1;
		# 150000;
	end
	IN3 = 1'b0;
end 

// IN4
initial
begin
	repeat(2)
	begin
		IN4 = 1'b0;
		IN4 = #200000 1'b1;
		# 200000;
	end
	IN4 = 1'b0;
end 

meuchip_vlg_sample_tst tb_sample (
	.IN1(IN1),
	.IN2(IN2),
	.IN3(IN3),
	.IN4(IN4),
	.sampler_tx(sampler)
);

meuchip_vlg_check_tst tb_out(
	.OUT1(OUT1),
	.OUT2(OUT2),
	.OUT3(OUT3),
	.OUT4(OUT4),
	.sampler_rx(sampler)
);
endmodule

