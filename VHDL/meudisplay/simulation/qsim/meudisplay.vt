// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/22/2019 20:08:46"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    meudisplay
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module meudisplay_vlg_sample_tst(
	A,
	B,
	C,
	D,
	sampler_tx
);
input  A;
input  B;
input  C;
input  D;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or C or D)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module meudisplay_vlg_check_tst (
	Sa,
	Sb,
	Sc,
	Sd,
	Se,
	Sf,
	Sg,
	sampler_rx
);
input  Sa;
input  Sb;
input  Sc;
input  Sd;
input  Se;
input  Sf;
input  Sg;
input sampler_rx;

reg  Sa_expected;
reg  Sb_expected;
reg  Sc_expected;
reg  Sd_expected;
reg  Se_expected;
reg  Sf_expected;
reg  Sg_expected;

reg  Sa_prev;
reg  Sb_prev;
reg  Sc_prev;
reg  Sd_prev;
reg  Se_prev;
reg  Sf_prev;
reg  Sg_prev;

reg  Sa_expected_prev;
reg  Sb_expected_prev;
reg  Sc_expected_prev;
reg  Sd_expected_prev;
reg  Se_expected_prev;
reg  Sf_expected_prev;
reg  Sg_expected_prev;

reg  last_Sa_exp;
reg  last_Sb_exp;
reg  last_Sc_exp;
reg  last_Sd_exp;
reg  last_Se_exp;
reg  last_Sf_exp;
reg  last_Sg_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	Sa_prev = Sa;
	Sb_prev = Sb;
	Sc_prev = Sc;
	Sd_prev = Sd;
	Se_prev = Se;
	Sf_prev = Sf;
	Sg_prev = Sg;
end

// update expected /o prevs

always @(trigger)
begin
	Sa_expected_prev = Sa_expected;
	Sb_expected_prev = Sb_expected;
	Sc_expected_prev = Sc_expected;
	Sd_expected_prev = Sd_expected;
	Se_expected_prev = Se_expected;
	Sf_expected_prev = Sf_expected;
	Sg_expected_prev = Sg_expected;
end



// expected Sa
initial
begin
	Sa_expected = 1'bX;
end 

// expected Sb
initial
begin
	Sb_expected = 1'bX;
end 

// expected Sc
initial
begin
	Sc_expected = 1'bX;
end 

// expected Sd
initial
begin
	Sd_expected = 1'bX;
end 

// expected Se
initial
begin
	Se_expected = 1'bX;
end 

// expected Sf
initial
begin
	Sf_expected = 1'bX;
end 

// expected Sg
initial
begin
	Sg_expected = 1'bX;
end 
// generate trigger
always @(Sa_expected or Sa or Sb_expected or Sb or Sc_expected or Sc or Sd_expected or Sd or Se_expected or Se or Sf_expected or Sf or Sg_expected or Sg)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Sa = %b | expected Sb = %b | expected Sc = %b | expected Sd = %b | expected Se = %b | expected Sf = %b | expected Sg = %b | ",Sa_expected_prev,Sb_expected_prev,Sc_expected_prev,Sd_expected_prev,Se_expected_prev,Sf_expected_prev,Sg_expected_prev);
	$display("| real Sa = %b | real Sb = %b | real Sc = %b | real Sd = %b | real Se = %b | real Sf = %b | real Sg = %b | ",Sa_prev,Sb_prev,Sc_prev,Sd_prev,Se_prev,Sf_prev,Sg_prev);
`endif
	if (
		( Sa_expected_prev !== 1'bx ) && ( Sa_prev !== Sa_expected_prev )
		&& ((Sa_expected_prev !== last_Sa_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sa :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sa_expected_prev);
		$display ("     Real value = %b", Sa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Sa_exp = Sa_expected_prev;
	end
	if (
		( Sb_expected_prev !== 1'bx ) && ( Sb_prev !== Sb_expected_prev )
		&& ((Sb_expected_prev !== last_Sb_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sb :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sb_expected_prev);
		$display ("     Real value = %b", Sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Sb_exp = Sb_expected_prev;
	end
	if (
		( Sc_expected_prev !== 1'bx ) && ( Sc_prev !== Sc_expected_prev )
		&& ((Sc_expected_prev !== last_Sc_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sc_expected_prev);
		$display ("     Real value = %b", Sc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Sc_exp = Sc_expected_prev;
	end
	if (
		( Sd_expected_prev !== 1'bx ) && ( Sd_prev !== Sd_expected_prev )
		&& ((Sd_expected_prev !== last_Sd_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sd_expected_prev);
		$display ("     Real value = %b", Sd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Sd_exp = Sd_expected_prev;
	end
	if (
		( Se_expected_prev !== 1'bx ) && ( Se_prev !== Se_expected_prev )
		&& ((Se_expected_prev !== last_Se_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Se :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Se_expected_prev);
		$display ("     Real value = %b", Se_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Se_exp = Se_expected_prev;
	end
	if (
		( Sf_expected_prev !== 1'bx ) && ( Sf_prev !== Sf_expected_prev )
		&& ((Sf_expected_prev !== last_Sf_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sf :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sf_expected_prev);
		$display ("     Real value = %b", Sf_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Sf_exp = Sf_expected_prev;
	end
	if (
		( Sg_expected_prev !== 1'bx ) && ( Sg_prev !== Sg_expected_prev )
		&& ((Sg_expected_prev !== last_Sg_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sg_expected_prev);
		$display ("     Real value = %b", Sg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Sg_exp = Sg_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module meudisplay_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg C;
reg D;
// wires                                               
wire Sa;
wire Sb;
wire Sc;
wire Sd;
wire Se;
wire Sf;
wire Sg;

wire sampler;                             

// assign statements (if any)                          
meudisplay i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.Sa(Sa),
	.Sb(Sb),
	.Sc(Sc),
	.Sd(Sd),
	.Se(Se),
	.Sf(Sf),
	.Sg(Sg)
);

// A
always
begin
	A = 1'b0;
	A = #25000 1'b1;
	#25000;
end 

// B
always
begin
	B = 1'b0;
	B = #50000 1'b1;
	#50000;
end 

// C
always
begin
	C = 1'b0;
	C = #100000 1'b1;
	#100000;
end 

// D
initial
begin
	repeat(2)
	begin
		D = 1'b0;
		D = #200000 1'b1;
		# 200000;
	end
	D = 1'b0;
end 

meudisplay_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.sampler_tx(sampler)
);

meudisplay_vlg_check_tst tb_out(
	.Sa(Sa),
	.Sb(Sb),
	.Sc(Sc),
	.Sd(Sd),
	.Se(Se),
	.Sf(Sf),
	.Sg(Sg),
	.sampler_rx(sampler)
);
endmodule

